#+LATEX_HEADER: \usepackage[parfill]{parskip}

* COMP1110 - Structured Programming

* Wk 1

** L1

*** Java Variables 

- *Instance*
  - non-static fields, object-local
  - each object has its own version (instance) in the field
- *Class*
  - Static fields, global
  - Exactly one version of the field exists
- *Local*
  - Temporary state, limited to execution scope of code
- *Parameters*
  - Temporary state, limited to execution scope, passed form one method to another


Java names:
- are case-sensitive
- whitespace not permitted
- $, _ not permitted
- Java keywords and reserved words cannot be used

Captilazation conventions:
- class names start with capital letters (=Bike=)
- variable names start with lower cas, and use upper case for subsequent word (=currentGear=)
- constant names use all caps and underscores (MAX\textunderscore GEAR\textunderscore RATIO)

*** Java's Primitive data types
byte
short
int
longf
float
double
boolean
char

| type    | description                                            | rang           | default |
|---------+--------------------------------------------------------+----------------+---------|
| byte    | 8-bit signed 2's complement integer                    | -128 - 127     | 0       |
| short   | 16-bit signed 2's complement integer                   | -32768 - 32767 | 0       |
| int     | 32-bit signed 2's complement integer                   | -2^31 - 2^31-1 | 0       |
| long    | 64-bit signed 2's complement integer                   | -2^63 - 2^63-1 | 0L      |
| float   | single precision 32-bit IEEE 754 floating point number |                | 0.0f    |
| double  | double precision 64-bit IEEE 754 floating point number |                | 0.0d    |
| boolean | logically just a single bit: true /or/ false           | true, false    | ????    |
| char    | 16-bit Unicode character                               | 0 - 65?        | ????    |

*** Java Literals
- When a numerical value, e.g. 1, appears, the compier normally knows exactly what it means
- Special cases:
  - An integer value is a `long` if it ends with 'l' or 'L'
  - The prefix `0x` indicates hexadecimal, `0b` is binary
    - 0x30 // 48 epressed in hex
    - 0b110000 // 48 expressed in binary
  - An `f` indicates a `float` while d indicates double
  - Underscores may be used to break up numbers
    - long creditCardNumber = 1234_5678_9012_3456

** L2

*** Java Arrays

Arrays hold a fixed number of values of a given type (or sub type)

- Declaring: \mintinline{java}{int[] values;}

- Initializing: \mintinline{java}{values = new int[8];} for an 8 element array

- Accessing: \mintinline{java}{int x = values[3];} accessing the 4th element

- Copying: \mintinline{java}{System.arraycopy(0, y, 0, 8)}


*** Java Operators

- Assignment: \mintinline{java}{=}

- Arithmetic: \mintinline{java}{+ - * / %}

- Unary: \mintinline{java}{+ - ++ -- !}

- Equality, relational conditional and \mintinline{java}{instanceof}: \mintinline{java}{== != > >= < <= && || instanceof}

- Bitwise: \mintinline{java}{~ & ^ | << >> >>>}

*** Expressions

A construct that evaluates to a *single value*

Made up of:
- variables
- operators
- method invocations
*STILL NEED TO GRAB THE REST OF THIS*

* Wk 2

** Lab exams next week
   SCHEDULED: <2017-08-09 Wed>
make sure you've done _all_ of the questions because we've had them all

** TODO Rest of the lecture from friday done, make sure to watch that as well 
** L1

i++ -> i = i + 1
*** Control Flow 1 (J5)

Imperative programming has three components:
- Sequence: one thing after another
- Selection: choices / options on where/what the program can go/do
- Iteration: 

**** If-else
- \mintinline{java}{if-then & if-then-else} statements
  - can be nested, ifs within ifs (in some cases though else-if is a better fit)
  - take the form of
#+begin_src java
    if (condition) {
        body;
    } else-if (condition) {
        body;
    } else {
        body;
    }
#+end_src

**** switch statements
- \mintinline{java}{switch} selects one path among many
  - Execution "jumps" to the first matching \mintinline{java}{case}
  - Execution continues unless a \mintinline{java}{break} statement is issued
  - \mintinline{java}{default} is used to perform an action when no case statement is met
  - Works thus:
#+begin_src java
switch (var) {
    case var_value;
        body for case;
        break; // need to put this in to stop at this statement, otherwise it just keeps going lol
    case var_value2;
        body for case;
        break; 
    ...etc...
    default:
        body for no matches;
}
#+end_src

*** Control Flow 2 (J6)

**** While and do-while
- The \mintinline{java}{while} statement executes continuously while condition is \mintinline{java}{true}
- The \mintinline{java}{do-while} evaluates conditional at the *end* of the statement
#+begin_src java
while (condition) {
    body;
}
#+end_src

#+begin_src java
do {
    body;
} while (condition);
#+end_src

**** For

A compact way to iterate over a set of variables

Statement has 3 logical parts:
- Inititialization
- Termination condition
- Increment statement

#+begin_src java
for (type var = x; x < y; x++ or some other action) {
    body;
}

// print all items in array
for (int v : array) (
    body; // e.g. System.out.println("value of array at this index is " + v);
)
#+end_src

**** Branching statements (loops)
- The \mintinline{java}{break} statement terminates a loop costruct
- The \mintinline{java}{continue} statement repeats the loop construct

*** Methods (J7)

- A subroutine
  - Reusable code
  - Modularity, encapsulation
- May take arguments
- _*May*_ return a value

**** Method Declaration

Method declarations will have the following, in order;
- Any modifiers (\mintinline{java}{public}, \mintinline{java}{private}, etc)
- return type
- name
- parameters, in parentheses
- exceptions the method may throw
- body 

**** Class and Instance methods

     A method declared with the \mintinline{java}{static} modifier is a *class* method (otherwise it is an *instance* method)

Class methods may operate *on class fields only*

Instance methods may operate on class *and* instance fields

**** Parameters

     Parameters are the mechanism for passing iformation to a method or constructor

- Primitive types passed by /value/
  - changes to par *are not seen* by caller
- Reference types passed by /value/
  - Changes to the /reference/ *are not seen* by caller
  - CHanges to /object referred to/ *are not seen* by caller
- Your last parameter may in fact be more than one parameter (/varargs/), and treated as an array

**** Branching (methods)

     The \mintinline{java}{return} statement exits the current method

**** Returning a value from a method

Methods return to caller when:
- all statemens in method are executed, or
- \mintinline{java}{return} is reached
- method throws exceptions

Methods declared \mintinline{java}{void} return nothing

*** Classes and Objects 1 (O1)

**** Class declaration
A class declaration will have the following, in order:
- modifiers
- keyword \mintinline{java}{class}
- class' name (first letter capitalized)
- optional superclass' name precede by \mintinline{java}{extends}
- optional list of interfaces preceded by \mintinline{java}{implements}
- body, in {}

**** Member Variable Declaration

Three kinds:
- Class and instance variable (fields)
- Variables within method (local variables)
- arguments (parameters)

MORE HERE FOR THIS PART

**** Constructors

A special method that is automatically executed when an instance is created

Constructors differ from normal methods:
LIST OF SHIT

**** Creating objecs
fuck this omg

**** Using objects

Go over this bit, hard to understand when you aren' paying proper attention and you've had to skip over a whole bunch of stuff as well

** L2 

*** Classes and  Objects 2

**** Locals (stack), Globals (statics), and Heap (objects)

- *Local* variables are declared within the scope of a method and hold temporary state, disappear once the method returns
- *Global* variables (aka /class variables/) are declared within the scope of a class (with a \mintinline{java}{static} qualifier), and last als long as the class is loaded (usually duration of the program)
- *Heap* variabes (/instance variables/) are declared within the scope of a class (*without* the \mintinline{java}{static} qualifier), and last as long as the containing instance is reachable


**** Garbage Collection

In some object oriented languages, the programmer must keep track of objects and delete them when they are no longer used. This is error prone.

Java uses a garbage collector to automatically collect objects that can *no longer be used*. Garbage collection approximates liveness by reachability (the collector conservatively assumes that any reachable object is live).

**** The \mintinline{java}{this} keyword

     Within instance methods and constructors, the \mintinline{java}{this} keyword refers to the object whose method or constructor is being called

- Disambiguating field names form parameters
- Calling other constructors

**** Access Control

Access modifiers determine whether fields and methods may be accessed by other classes

- Top level: \mintinline{java}{public} or /package-private/
- Member level: \mintinline{java}{public}, \mintinline{java}{protected}, /package-private/, or \mintinline{java}{private}

| Modifier                     | Class      | Package    | Subclass   | World      |
|------------------------------+------------+------------+------------+------------|
| \mintinline{java}{public}    | \checkmark | \checkmark | \checkmark | \checkmark |
| \mintinline{java}{protected} | \checkmark | \checkmark | \checkmark | \times     |
| /no modifier/                | \checkmark | \checkmark | \times     | \times     |
| \mintinline{java}{private}   | \checkmark | \times     | \times     | \times     |

**** Class and Instance Members

     The \mintinline{java}{static} keyword identifies class variable, class methods and constants
- A *class variable* is common to all objects (only one version)
- A *class method* is einvoked using a class name (not an object reference) and executes independently of any particular object
- A *constant* can be declared by combining the \mintinline{java}{final} modifier with the \mintinline{java}{static} keyword

**** Initializers

     Fields may be initialized when they are declared. They can also be initialized by *initializer blocks*, which can initialize fields using arbitrarily complex code (error handling, loops, etc)
- A statict initalizer block consists of code enclosed by braces '{}' and preceded by the \mintinline{java}{static} keyword
- An instance initializer block is similar , but does nat have the \mintinline{java}{static} keyword

**** Enum Types

     Defined with the \mintinline{java}{enum} keyword. 



Consists of a fixed set of onstants as its fields.
This is useful for defining non-numerical sets such as NORTH, SOUTH, EAST, WEST, or HD, D, CR, P, N, etc.

- May have other *fields*
- May have *methods*
- May use *constructors*
- Can be used as argument to *iterators*

\pagebreak

Created like so: 
#+begin_src java
public enum Gender {
    Female, Male
}
#+end_src

Which can be referred to like: \mintinline{java}{Gender gender}

***** Richer Enum

#+begin_src java
public enum Grade {
    HD{"High Distinction", 80}, \ 
    D{"Distinction", 70}, \
    C{"Credit", 60}, \
    P{"Pass", 50}, \
    N{"Fail", 0};

    //final = unchanging
    private final String longname;
    private final int lower; //lower bound
    
    Grade(String longname, int lower) {
        this.longname = longname;
        this.lower = lower;
    }

    public static Grade fromMark(double mark) {
        for (Grade g : Grade.values()) {
            if (mark >= g.lower) {
                return g;
            }
        }
        return N; //this needs to be here so that the method has a return
    }
}
#+end_src

      Then, for this example at least add it to comp1110 student \mintinline{java}{+ Grade.fromMark(mark)}

**** Inheritance

Calling parent constructor: \mintinline{java}{super(name, age, gender);} to inherit values from parent. New values need to be assigned as normal.

To add to \mintinline{java}{toString()} method of child class, use \mintinline{java}{return super.toString() + "whatever"} to prine whatever the parent does + the important shit for this

* Wk 3

** L1


*** Nested Classes

A class may be defined inside another class. They imporve encapsulation adn clarity.

- *Static nested classes*: (use \mintinline{java}{static} keyword) behave as if declared elsewhere, but happen to be packaged together in a single file, cannot refer directly to instance fileds of parent
- *Inner classes*: (non-static) has direct access to the instance fields and members of its enclosing class

#+begin_src java
public class LectureTheater {
    String name;
    Projector projector;

    public LectureTheater(String name) {
        this.name = name;
        this.projector = new Projector(projectorModel, hd, this);
    }
    
    @Override
    public String toString() {
    return "Room: " + name + ", Model: " + projector;
    }
}
    
public class Projector {
    private String model;
    private boolean hd;
    private LectureTheater room;

    Projector(String model, boolean hd, LectureTheater room) {
        this.model = model;
        this.hd = hd;
        this.room = room;
    }

    @Override
    public String toString() {
    return "Model: " +model+"Is HD? "+hd+", in location: "+room.name;
    }
}
#+end_src
THIS EXAMPLE IS NOT COMPLETE NEED TO ADD THE FINAL PART OF IT


This is a static nested thingy
#+begin_src java
public class LectureTheaterStaticNested {
    String name;
    Projector projector;

    public LectureTheater(String name) {
        this.name = name;
        this.projector = new Projector(projectorModel, hd, this);
    }
    
    Projector(String model, boolean hd, LectureTheater room) {
        this.model = model;
        this.hd = hd;
        this.room = room;
    }

    @Override
    public String toString() {
    return "Room: " + name + ", Model: " + projector;
    }
}    
#+end_src
THIS ONE ISN'T FINISHED EITHER LUL, make sure to get it down later because of dankm memes

*** Objects and Classes 3

**** Interfaces

An interface can be thought of as a contrac. The implemnter of a n interface /must/ implement the listed functionality
- uses \mintinline{java}{interface} keyword rather than \mintinline{java}{class}
- cannot be instantiated (can't be created with \mintinline{java}{new})
- can /only/ contain constants, method signatures, nested types
- Classes implement inerfaces via \mintinline{java}{implements} keyword

An interface can be used as a type. A variable declared with an interface type can hold a reference to an object of any class that implements xxx

ADD IN A CODE EXAMPLE HERE IT"S JUST REALLY HARD BECAUSE I REALLY NEED TO PEE AT THE MOMENT

*** Lambda Expressions

Allow code to be passed as a parameter, just as data can be. 

Particularly useful for event handling; can pass /behaviou/ as an argument ('do /this/ when x happens')

Syntax:
- Comma-separated formal paramaters (x)
- Arrow (->)
- Body (either single expression ar statment block, which may contain return)
#+begin_src java
     x -> x > 100 or x -> { ... return true; }
#+end_src

*** Inheritance

An inherited class in known as a /subclass, derived class/ or /child class/. Its parent is known as a /superclass, base class/, or /parent class/

Subclasses inherit via the \mintinline{java}{extends} keyword

**** Overriding and Hiding Methods

Instance methods:
- If method has same signature as one its superclass, it is said to *override*. Marke with \mintinline{java}{@Override} annotation
- Same name, number and type of parameter, and return type as overridden parent method
- The *type of the instance* determines the method

Class methods:
- If it hase same ignature, it *hides* the superclass metod
- The cass with respect to which te call is made determines the method

**** Polymorphism

stuff

**** Hiding fields

Don't do it

**** The \mintinline{java}{super} keyword



_/*Lots of stuff to add in here as well*/_

** L2

*** Inheritance 2 (O5)

In Java all classes ultimately inherit from *one* root class: \mintinline{java}{java.lang.Object}.
Implemented methods:
- \mintinline{java}{clone} returns a copy of an object
- \mintinline{java}{equals(Object obj)} establishes equivalence
- \mintinline{java}{finalize()} called by GC before reclaiming
- \mintinline{java}{getClass()} returns runtime class of the object
- \mintinline{java}{hashCode()} returns a hash code for the object
- \mintinline{java}{toString()} returns string representation of object

**** Final Classes and Methods

The \mintinline{java}{final} keyword in a class declaration states that the class /may not/ be subclassed

The \mintinline{java}{final} keyword in a method declaration states that the method /may not/ be overridden

"bottom of the hierarchy", i.e. for Animal, Albatross would be final, but Animal is abstract

**** Abstract Classes and Methods

The \mintinline{java}{abstract} keyword in a class declaration states that the class is abstract, it may not be instantiated

The \mintinline{java}{abstract} keyword in a method declaration states that the method declaration is abstract; the implementation must be provided by a subclass

**** Casting a thing

#+begin_src java
// declares type to reassure Java that it's a thingy
((Platypus) animals[animals.length-1]).quack();
#+end_src

*** JavaFX 1 (X1)

- Designed for rich client applications
  - Graphics, UI's, video, audio, etc.
- Java APIs, integrated with Java8
  - Not to be confused with JavaFX 1.x, which was a scripting language, not a Java APIs
- Replaces Swing
- JavaFX HelloWorld

- Extend \mintinline{java}{javafx.application.Application}
  - Override the \mintinline{java}{start()} method
- \mintinline{java}{Stage}
  - Think of it as a window
- \mintinline{java}{Scene}
  - Container for a scene graph
- \mintinline{java}{StackPane}
  - /Organizer/ of nodes in scene graph
  - Others include \mintinline{java}{FlowPane, TilePane, GridePane}, etc.

**** JavaFX Scene Graph

Tree of nodes, with a single 'branch' at the root
- branch (may have children, eg \mintinline{java}{Group, Region})
- leaf (may not have children, eg \mintinline{java}{Rectangle, Circle})


**** JavaFX Rectangle / Circle

#+begin_src java
// lots of import stuff

public class JavaFXSquare extends javafx.application.Application {
    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("Square"); // add a snippet for this
        Group root = new Group();
        Scene scene = new Scene(root, 800, 450);
        primaryStage.setScene(scene);

        Rectangle r = new Rectangle(100, 100, 100, 100);
        Circle c = new Circle(400, 225, 100);
        r.setFill(Color.RED);
        c.setFill(Color.RED);
        root.getChildren().add(c);

        
        primaryStage.show();
    }
}
#+end_src

**** JavaFX Hello World

#+begin_src java
// lots of import statements

public class JFXHelloWorld extends javafx.application.Application {
    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("Hello");
        StackPane root = new StackPane();
        Scene scene = new Scene(root, 800, 450);
        primaryStage.setScene(scene);

        
        Text hi = new Text("Hello world!");
        hi.setFont(Font.font("Liberation Mono", FontWeight.NORMAL, 40));
        hi.setFill(Color.BLUE);
        hi.setOpacity(0.5); 
        primaryStage.setOpacity(0.5); // window opacity
        
        root.getChildren().add(hi);
                
        primaryStage.show();
    }
}
#+end_src

* Wk 4

** L1

*** JavaFX and Event Handling (X2)

**** Event Handling

Event handling is another control flow construct
- Branches
- Loops
- Methods
- Events (the occurrence of event changes control flow)

Events usually handled using Lamda expressions

**** Events in JavaFX

Events are instances of \mintinline{java}{javafx.event.Event}

Event properties:
- Event type
- Source
- Target

Event handlers
- Pass the Lambda expression, 
  eg. \mintinline{java}{scene.setOnKeyType(event -> code)}

*** Number, Autoboxing (J10)

**** The Number Classes

Normally yyou will represent numbers with the primitive types \mintinline{java}{int, short, float}, etc.
Java includes 'boxed' object analogues to each of these: \mintinline{java}{Integer, Short, Float}, etc.
- Number classes have methods (primitives don't)
  - \mintinline{java}{toString(), parseInt()}, etc.
- Number classes have constants
  - \mintinline{java}{Integer.MIN_VALUE, Short.MAX_VALUE}, etc.
- Number classes have a space overhead
  - They are instantiated as true objects

**** Autoboxing

Classes such as Innteger and Character are 'boxed' versions of the primitive types int and char.
Java offers automatic support for boxing and unboxing.
- Boxing: \mintinline{java}{Integer i = 5;}
- Unboxing: \mintinline{java}{int j = i;}

**** The Math Class
The Math class contains methods and constants useful for basic mathematics

*** Character and String (J11)

**** The Character Class

The Character class boxes \mintinline{java}{char}, just like Integer boxes int.
It contains methods and constants usefulr for manipulating characters
- Tests: \mintinline{java}{isLetter(), isDigit()}, etc
- Conversion: \mintinline{java}{toString()} (a single character string!)

Escape sequences are used to represent characters that are hard to type:
- =\' , \" , \\, \n=, etc.

**** The String Class

Provided to store and manipulate strings
- Implicit creation from literal: \mintinline{java}{String x = "foo"}
- The special \mintinline{java}{length} field: \mintinline{java}{if (x.length() > 3)}
- Concatenation with "+": \mintinline{java}{String y = x + "bar"}


- Get a character with \mintinline{java}{charAt()}
- Get a substring with \mintinline{java}{substring()}
- Others: \mintinline{java}{split(),trim(),toLowerCase()}, etc
- Finding: \mintinline{java}{indexOf(), contains()}, etc
- Replacing: \mintinline{java}{replace(), replaceAll()}, etc

*** Generics (J12)

Sometimes it is useful to parameterize a class with a type, T. Java generics allow us to do this.
Rather than \mintinline{java}{IntContainer, LongContainer}, etc, we can just write \mintinline{java}{Container<T>}, and then create instances such as \mintinline{java}{Container<Integer>}, etc.
Prior to the introduction of Java generics, programmesr often used \mintinline{java}{Object} as a work-around because it can refer to any non-??? type
=======
  

* Wk 5

** L1

Mid-sem is 5pm this Friday, really should probs do this because of how shit you did on the first assignment lul, do the practice exam to make sure you have an idea of what it's going to be like

*** Introduction to Software Systems

**** The Collection Framework
Interfaces: implementation-agnostic interfaces for collections
 
Implementations: concrete implementations

Algorithms: searching, sorting, etc

***** TODO Grab the table, that seems handy

*** Using Collections (J14)

**** forEach

Collections implement the \mintinline{java}{forEach} thingy

**** Ordering collections

The \mintinline{java}{Comparable} interface defines a 'natural' ordering for all instances of a given type, T: <<<<ex>>>>
#+begin_src java
     
#+end_src

The \mintinline{java}{Comparator} interface allows a type T to be ordered in additional ways
#+begin_src java
     public interface Comparator<T> ........
#+end_src

**** Collections.sort()

- No arguments, uses natural order for type
- Single lambda argument




